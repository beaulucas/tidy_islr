[
["index.html", "A Tidy Introduction To Statistical Learning Preface", " A Tidy Introduction To Statistical Learning Beau Lucas 2019-10-25 Preface This book will serve as a source of notes and exercise solutions for An Introduction to Statistical Learning. My approach will be centered around the tidyverse. This is not a replacement for the book, which should be read front to back by all machine learning enthusiasts. Chapter names will line up, and certain subheadings will also match. Sometimes my notes will contain text lifted straight from the book without modification. This is not an attempt to plagiarize or claim their writing as my own. My goal is for this bookdown project to be a quick stop for machine learning enthusiasts to reference high-level ideas from ISLR in a modern media format. "],
["intro.html", "Chapter 1 Introduction 1.1 An Overview of Statistical Learning 1.2 Data Sets Used in Labs and Exercises 1.3 Book Website", " Chapter 1 Introduction 1.1 An Overview of Statistical Learning Statistical learning is focused on supervised and unsupervised modeling and prediction. 1.2 Data Sets Used in Labs and Exercises All data sets used in this book can be found in ISLR and MASS packages, with some also being found in the base R distribution. We will utilize the tidyverse ecosystem to tackle the exercises and labs, as the R code found in the original textbook is outdated. library(ISLR) library(MASS) library(tidyverse) library(knitr) library(kableExtra) library(modelr) library(broom) 1.3 Book Website The website and free PDF for the book can be found here: www.statlearning.com And here are the YouTube lectures an R labs: Youtube - Statistical Learning "],
["statistical-learning.html", "Chapter 2 Statistical Learning 2.1 What is Statistical Learning? 2.2 Assessing Model Accuracy 2.3 Lab: Introduction to R 2.4 Exercises", " Chapter 2 Statistical Learning 2.1 What is Statistical Learning? Methods to estimate functions that connect inputs to outputs. If there exists a quantitative response variable \\(Y\\) and \\(p\\) different predictors (\\(X_1\\), \\(X_2\\), …, \\(X_p\\)), we can write this relationship as: \\(Y = f(X) + ε\\) 2.1.1 Why Estimate \\(f\\)? 2.1.1.1 Prediction We can predict Y using: \\(\\hat{Y} = \\hat{f}(X)\\) Accuracy of \\(Y\\) is dependant on: reducible error \\(\\hat{f}\\) will never be perfect estimate of \\(f\\), and model can always be potentially improved Even if \\(\\hat{f} = f\\), prediction would still have some error irreducible error Because \\(Y\\) is also a function of random \\(ε\\), there will always be variability We cannot reduce the error introduced by \\(ε\\) 2.1.1.2 Inference How does \\(Y\\) respond to changes in \\(X_1, X_2, ..., X_p\\)? 2.1.2 How do we estimate \\(f\\)? Use training data to train method \\(x_ij\\) is value of \\(j\\)th predictor for observation \\(i\\), \\(y_i\\) is value of response variable \\(i = 1, 2, ..., n\\), \\(j = 1, 2, ..., p\\) Using training data, apply statistical learning method estimate unknown function \\(f\\) Most statistical learning methods can be characterized as either parametric or non-parametric 2.1.2.1 Parametric Methods Two-step model-based approach: Make an assumption about functional form of \\(f\\), such as “\\(f\\) is linear in \\(X\\)” Perform procedure that uses training data to train the model * In case of linear model, this procedure estimates parameters \\(β_0, β_1, ..., β_p\\) * Most common approach to fit linear model is (ordinary) least squares This is parametric, as it reduces the problem of estimating \\(f\\) down to one of estimating a set of parameters. Problems that can arise: Model will not match the true unknown form of \\(f\\) If model is made more flexible, which generally requires estimating a greater number of parameters, overfitting can occur 2.1.2.2 Non-parametric Methods Non-parametric methods do not make assumptions about the form of \\(f\\). An advantage of this is that they have the potential to fit a wider range of possible shapes for \\(f\\). A disadvantage is that, because there are no assumptions about the form of \\(f\\), the problem of estimating \\(f\\) is not reduced to a set number of parameters. This means more observations are needed compared to a parametric approach to estimate \\(f\\) accurately. 2.1.3 The Trade-Off Between Prediction Accuracy and Model Interpretability Restrictive models are much more intepretable than flexible ones. Flexible approaches can be so complicated that it is hard to understand how predictors affect the response. If inference is the goal, simple and inflexible methods are easier to interpret. For prediction, accuracy is the biggest concern. However, flexible models are more prone to overfitting. 2.1.4 Supervised Versus Unsupervised Learning Most machine learning methods can be split into supervised or unsupervised categories. Most of this textbook involves supervised learning methods, in which a model that captures the relationship between predictors and response measurements is fitted. The goal is to accurately predict the response variables for future observations, or to understand the relationship between the predictors and response. Unsupervised learning takes place when we have a set of observations and a vector of measurements \\(x_i\\), but no response \\(y_i\\). We can examine the relationship between the variables or between the observations. A popular method of unsupervised learning is cluster analysis, in which observations are grouped into distinct groups based on their vector of measurements \\(x_i\\). An example of this would be a company segmenting survey respondents based on demographic data, in which the goal is to ascertain some idea about potential spending habits without possessing this data. Clustering has some drawbacks. It works best when the groups are significantly distinct from each other. In reality, it is rare for data to exhibit this characteristic. There is often overlap between observations in different groups, and clustering will inevitably place a number of observations in the wrong groups. Further more, visualization of clusters breaks down as the dimensionality of data increases. Most data contains at least several, if not dozens, of variables. It is not always clear-cut whether a problem should be handled with supervised or unsupervised learning. There are some scenarios where only a subset of the observations have response measurements. This is a semi-supervised learning problem, in which a statistical learning method that can utilize all observations is needed. 2.1.5 Regression Versus Classification Problems Variables can be categorized as either quantitative or qualitative. Both qualitative and quantatitive predictors can be used to predict both types of response variables. The more important part of choosing an appropriate statistical learning method is the type of the response variable. 2.2 Assessing Model Accuracy Every data set is different and there is no one statistical learning method that works best for all data sets. It is important for any given data set to find the statistical learning method that produces the best results. This section presents some concepts that are part of that decision-making process. 2.2.1 Measuring the Quality of Fit We need to be able to quantify how well a model’s predictions match the observed data. How close are the model’s predicted response values to the true response values? In regression, mean squared error (MSE) is the most commonly-used measure. A small MSE indicates the predicted responses are very close to the true ones. MSE used on training data is more accurately referred to as the training MSE. We are most concerned with the accuracy of the predictions when we apply our methods to previously unseen data. If you are trying to predict the value of a stock, your concern is how it performs in the future, not on known data from the past. Thus, the goal is then minimizing the test MSE, which measures the accuracy of a model on observations that were not used to train the model. Imagine a set of observations \\((x_0, y_0)\\) that were not used to train the statistical learning method. \\(Ave(y_0 - \\hat{f}(x_0))2\\) The goal is to select the model that minimizes the test MSE shown above. How can we do this? Sometimes, there is an available test data set full of observations that were not used in training the model. The test MSE can be evaluated on these observations, and the learning method which produces the smallest TSE will be chosen. If no test observations are available, picking the method that minimizes the training MSE might seem to be a good idea. However, there is no guarantee that a model with the lowest training MSE also has the lowest test MSE. Models often work in minimizing the training MSE, and can end up with large test MSE. There is a tradeoff in model flexibility, training MSE, and test MSE. A model that is too flexible can closely match the training data, but perform poorly on the test data. There is a sweet spot to find between model flexibility, training MSE, and test MSE that varies for each unique data set. Degrees of freedom is a quantity that summarizes the flexibility of a curve, discused more fully in Chapter 7. The more inflexible a model is, the fewer degrees of freedom. As model flexibility increases, training MSE will inevitably decrease, but test MSE may plateau or even rise. A model with a small training MSE and large test MSE is overfitting the data, picking up patterns on the training data that don’t exist in the test data. Since we expect the training MSE to almost always be lower than the test MSE, overfitting is a specific case when there exists a less flexible model with a smaller test MSE. 2.2.2 The Bias-Variance Trade-Off The expected test MSE can be broken down into the sum of three quantities: the variance of \\(\\hat{f}(x_0)\\) the squared bias of \\(\\hat{f}(x_0)\\) the variance of the error terms ε \\(E(y_0 - \\hat{f}(x_0)^2 = Var(\\hat{f}(x_0)) + [Bias(\\hat{f}(x_0))]^2+Var(ε)\\) The formula above defines the expected test MSE, which can be thought of the average test MSE that would be obtained if we repeatedly estimated \\(f\\) and tested each at \\(x_0\\). To minimize expected test MSE, we need to choose a statistical learning method that achieves both low variance and low bias. Since variance and squared bias are nonnegative, the expected test MSE can never be lower than \\(Var(ε)\\), the irreducible error. Variance refers to how much \\(\\hat{f}\\) would change if repeatedly estimated with different training data sets. Methods with high variance can produce large changes in \\(\\hat{f}\\) through small changes in the training data. Generally, the more flexible a model it is, the higher the variance. Following the observations so closely can cause changes in just a single observation of the training data to result in significant changes to \\(\\hat{f}\\). More inflexible models, such as linear regression, are less susceptible to the effects of changing a single observation. Bias is the error introduced from approximating a complicated problem by a much simpler model. Fitting a linear regression to data that is not linear will always lead to high bias, no matter how many observations are in the training set. More flexible models tend to result in less bias. More flexible methods lead to higher variance and lower bias. The rate of change between the quantities determines at which point the test MSE is minimized. Bias tends to decrease at a faster rate in the beginning, causing the test MSE to decline. However, when flexibility reaches a certain point, variance will begin to increase faster than bias is decreasing, causing test MSE to rise. This relationship between bias, variance, and test MSE is known as the bias-variance tradeoff. Here is a good article on it: Understanding the Bias-Variance Tradeoff In real-life scenarios where \\(f\\) is unknown, we cannot explicitly compute the test MSE, bias, or variance. However, there are methods to estimate this, such as cross-validation, which will be discussed in Chapter 5. 2.2.3 The Classification Setting For classification problems where \\(y_i,...,y_n\\) are qualitative, we can quantify the accuracy of our estimate by using the training error rate, the proportion of mistakes that are made when applying our model \\(\\hat{f}\\) to the training observations. \\(1/n\\sum_{i=1}^nI(y_i \\neq \\hat{y_i})\\) training error rate Breaking the formula above down. \\(\\hat{y}_i\\) is the predicted class label for the \\(i\\)th observation using \\(\\hat{f}\\) \\(I(y_i \\neq \\hat{y_i})\\) is an indicator variable that equals 1 if \\(y_i \\neq \\hat{y_i}\\), and 0 if \\(y_i = \\hat{y_i}\\) If \\(I(y_i \\neq \\hat{y_i})\\) = 0, then the \\(i\\)th observation was classified correctly Similar to our regression problems, we are more interested in the model’s performance on test observations not used in training. The formula below gives us the test error rate for a set of observations of the form \\((x_0, y_0)\\). \\(Ave(I(y_0 \\neq \\hat{y_0}))\\) test error rate A good classifier will minimize the above. 2.2.3.1 The Bayes Classifier The test error rate is minimized by the classifier that assigns each observation to the most likely class, given its predictor values. Our decision is then based on finding the value at which the formula below is largest. \\(Pr(Y = j|X = x_0)\\) If the response values are binomial (let’s call them A and B) the classifier simplifies to: \\(Pr(Y = A|X = x_0) &gt; 0.5\\:then\\:A,\\:else\\:B\\) The Bayes decision boundary is the point where the probabilities are equal for both groups. Points on either side of this line are assigned to the group predicted by the classifier. The Bayes error rate averaged over all possible values of \\(X\\) is below. \\(1-E(max_jPr(Y = j|X))\\) Bayes error rate The Bayes error rate is often greater than zero, as observations between classes overlap in real-world data. 2.2.3.2 K-Nearest Neighbors Since the true conditional distribution of \\(Y\\) given \\(X\\) cannot be known in real data, the Bayes classifier is used as a “gold standard” to compare other models to. Many methods attempt to estimate this conditional distribution, and then classify an observation based on the estimated probability. A common method is K-nearest neighbors (KNN). Given a positive integer \\(K\\) and a test observation \\(x_0\\), KNN then does the following: identifies the \\(K\\) points in the training data that are closest to \\(x_0\\), represented by \\(N_0\\) estimates conditional probability for class \\(j\\) as the fraction of the points in \\(N_0\\) whose response values equal \\(j\\): \\(Pr(Y = j| X = x_0) = 1/K\\sum_{i\\in N_0}I(y_i = j)\\) applies Bayes rule and classifies test observation \\(x_0\\) to class with largest probability KNN can be surprisingly robust to the optimal Bayes classifier. The choice in \\(K\\) makes a huge difference. For example, a \\(K\\) = 1 is highly flexible, classifying observations based off of the closest nearby training observation. \\(K\\) = 100 would do the opposite, basing its classification off a large pool of training observations compared to the \\(K\\) = 1 version. The higher \\(K\\) value produces a more linear model. The trade-off between flexibility, training error rate, and test error rate applies to both classification and regression problems. 2.3 Lab: Introduction to R Finally we get to some R code. This chapter of ISLR introduces basic R syntax, and most of it is unchanged in my version. This should all be familiar to anyone who has used R before. We are going to be working with tibbles as our primary data structure throughout this book. Please read here: tibbles 2.3.0.1 Basic Commands Skipping this. 2.3.0.2 Graphics (Plotting) Here we begin to explore the “tidy” approach to R. We will abstain from base R plotting and use ggplot2, which is a more powerful tool. Let’s plot a scatterplot with some basic labels. tbl_rnorm &lt;- tibble( x1 = rnorm(100), y1 = rnorm(100) ) ggplot(tbl_rnorm, aes(x = x1, y = y1)) + geom_point() + labs(title = &quot;plot of x1 vs. y1&quot;, x = &quot;this is the x-axis&quot;, y = &quot;this is the y-axis&quot;) 2.3.0.3 Indexing data We will skip this. 2.3.0.4 Loading data ISLR mentions insuring proper working directory before loading data. Dealing with working directories in R is a bad idea. Fortunately, it’s easily avoidable through the use of RStudio projects, which keep all files used in analysis together and make your work more robust and reproducible. See the RStudio Projects chapter in r4ds for more information. We will opt for the readr (part of the tidyverse) package instead of base R. Take a look at this subsection of r4ds for reasons why: 11.2.1 Compared to base R Below is a reproducible example in which we create a tibble, save it as a .txt file, and then read it in with write_tsv(). The set of read_* functions in readr will be the standrad way to read local files into R. If you are using RStudio projects, there is no need to worry about working directories. # generate dummy data to read in generic_company_tibble &lt;- tibble( x = rnorm(100, mean = 25), y = rnorm(100, mean = 50), z = sample(c(&quot;apple&quot;, &quot;uber&quot;, &quot;facebook&quot;, &quot;twitter&quot;, &quot;tesla&quot;, &quot;google&quot;, &quot;microsoft&quot;), 1) ) tmp &lt;- tempfile() write_tsv(generic_company_tibble, tmp) company_data &lt;- read_tsv(tmp) readr provides a nice summary of the imported tibble. Calling the tibble by name will also give a breakdown of column names, data types, and number of observations. company_data ## # A tibble: 100 x 3 ## x y z ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 24.2 52.1 microsoft ## 2 25.7 50.2 microsoft ## 3 25.6 49.2 microsoft ## 4 24.8 51.1 microsoft ## 5 25.2 49.4 microsoft ## 6 23.6 50.8 microsoft ## # … with 94 more rows 2.3.0.5 Additional Graphical and Numerical Summaries ISLR mentions the attach() function, which allows R to reference column names of dataframes without specifying the dataframe. attach can lead to confusion and errors when working on a project with multiple sources of data. This is a bad practice, and should always be avoided. The book then goes into some explanation of plot(), which we will not be using. 2.4 Exercises For each of parts (a) through (d), indicate whether we would generally expect the performance of a flexible statistical learning method to be better or worse than an inflexible method. The sample size n is extremely large, and the number of predictors p is small (better) given large sample size, a flexible model would be able to capture a trend without being influenced too heavily by a small number of observations. The number of predictors p is extremely large, and the number of observations n is small. (worse) given the small sample size, an inflexible model would do better at not overfitting to a small number of observations (capturing patterns in the training data that dont really exist) The relationship between the predictors and response is highly non-linear. (better) highly flexible methods are highly non-linear and can produce better fits on non-linear data compared to inflexible methods such as linear regression The variance of the error terms, i.e. σ2 = Var(ε), is extremely high. (worse) given the high variance in the data, an inflexible method would overfit to the noise Explain whether each scenario is a classification or regression problem, and indicate whether we are most interested in inference or prediction. Finally, provide n and p. We collect a set of data on the top 500 firms in the US. For each firm we record profit, number of employees, industry and the CEO salary. We are interested in understanding which factors affect CEO salary. (regression; inference) This is a regression problem with both qualitative and quantitative predictors. Inference is the main goal, as the company probably wants a model that is human-readable in order to understand what determines a CEO’s salary. n = 500, p = 3 We are considering launching a new product and wish to know whether it will be a success or a failure. We collect data on 20 similar products that were previously launched. For each product we have recorded whether it was a success or failure, price charged for the product, marketing budget, competition price, and ten other variables. (classification; prediction) The goal is to classify whether a product will be a success or failure. Prediction is the goal, as they want to accurately determine if their product will succeed or fail. n = 20, p = 4 We are interested in predicting the % change in the USD/Euro exchange rate in relation to the weekly changes in the world stock markets. Hence we collect weekly data for all of 2012. For each week we record the % change in the USD/Euro, the % change in the US market, the % change in the British market, and the % change in the German market. (regression; prediction) The goal is to predict the % change of the exchange rate. We now revisit the bias-variance decomposition Provide a sketch of typical (squared) bias, variance, training error, test error, and Bayes (or irreducible) error curves, on a single plot, as we go from less flexible statistical learning methods towards more flexible approaches. The x-axis should represent the amount of flexibility in the method, and the y-axis should represent the values for each curve. There should be five curves. Make sure to label each one. bias_variance &lt;- tibble( flexibility = c(1:5), bias = c(300,200,150,100,50), variance = c(0,25,125,250,500), train_error = c(350,250,200, 125, 50), irreducible_error = 100, test_error = variance + bias + irreducible_error) %&gt;% gather(`bias`, `variance`, `train_error`, `irreducible_error`, `test_error`, key = &quot;measurement&quot;, value = &quot;value&quot;) ggplot(bias_variance, aes(x = flexibility, y = value, colour = measurement)) + geom_smooth(se = FALSE, method = &quot;lm&quot;, formula = y ~ poly(x,3)) + theme_minimal() You will now think of some real-life applications for statistical learning. Describe three real-life applications in which classification might be useful. Describe the response, as well as the predictors. Is the goal of each application inference or prediction? Explain your answer. predicting diabetes. response: future diabetes predictors: health and body measurements of patient goal: prediction, model complexity and human understanding is not important demographics that determine future education level response: education level predictors: demographic data goal: inference, prediction is important here too but researchers would probably want to understand and share which factors determine the response in order to raise awareness faulty parts in manufacturing response: whether or not part is faulty predictors: various tests on part goal: prediction, it is most important to have an accurate model, especially if faulty parts can lead to deaths Describe three real-life applications in which regression might be useful. Describe the response, as well as the predictors. Is the goal of each application inference or prediction? Explain your answer. number of riders on public transit over time response: how many riders are expected to use public transit predictors: current transit usage data, local population data, etc. goal: prediction, it is important to prepare for growth in transit usage so governments have enough time to make necessary changes demand for product response: how many units to expect to be sold predictors: current demand data, revenue growth, business expansion, changing in market trends, economy health goal: prediction, figure out in X amount of time demand for product in order to upsize/downsize to appropriate level determine future salary response: future expeceted salary predictors: employment history, education, geolocation, etc. goal: inference, researchers might want to know the most important factors that lead to higher salaries rather than a model that is too complex to understand What are the advantages and disadvantages of a very flexible (versus a less flexible) approach for regression or classification? Under what circumstances might a more flexible approach be preferred to a less flexible approach? When might a less flexible approach be preferred? Very flexible approach allows you to fit a more flexible function to the data. The advantage is that you have the potential to accurately predict data even as it moves away from linearity. The disadvantage are potential overfitting to the training data, increasing variance (individual observations affect the model to higher degree than non-flexible counterpart), and higher computational costs (as well as less human-readable explanations) When a more flexible approach is preferred: data that is non-linear, large sample size, prediction more important than inference When a less flexible approach is preferred: data that is more linear, smaller sample size, inference more important than prediction Describe the differences between a parametric and a non-parametric statistical learning approach. What are the advantages of a parametric approach to regression or classification (as opposed to a nonparametric approach)? What are its disadvantages? A parametric approach assumes a form of \\(f\\) and has to estimate an often known number of parameters (for example, linear regression simply requires estimating \\(p+1\\) coefficients) A non-parametric approach makes no assumptions about the true form of \\(f\\). They simply want to get as close as possible to \\(f\\). This allows them to take on a larger variety of shapes, and accomodate a larger variety of patterns. Advantages of a parametric approach are that they take less observations to generate (the problem is reduced to applying a known form to \\(f\\), such as linear regression), are less inclined to overfit, and generally less computationally intensive. Disadvantages of a parametric approach making assumptions about the form of \\(f\\), which may not match the real form and could lead to a model that doesn’t fit the data well The table below provides a training data set containing six observa- tions, three predictors, and one qualitative response variable. training_set &lt;- tibble( x1 = c(0,2,0,0,-1,1), x2 = c(3,0,1,1,0,1), x3 = c(0,0,3,2,1,1), y = c(&quot;red&quot;,&quot;red&quot;,&quot;red&quot;,&quot;green&quot;,&quot;green&quot;,&quot;red&quot;)) kable(training_set) x1 x2 x3 y 0 3 0 red 2 0 0 red 0 1 3 red 0 1 2 green -1 0 1 green 1 1 1 red Suppose we wish to use this data set to make a prediction for \\(Y\\) when \\(X1 = X2 = X3 = 0\\) using K-nearest neighbors. Compute the Euclidean distance between each observation and the test point, \\(X1 = X2 = X3 = 0\\). The Euclidean Distance for three dimensions can be written as: \\(d = \\sqrt {\\left( {x_1 - x_2 } \\right)^2 + \\left( {y_1 - y_2 } \\right)^2 + \\left( {z_1 - z_2 } \\right)^2 }\\) Let’s write a function that can handle this in R, then use the rowwise() feature of dplyr to apply it across the rows of our tibble. euc_dist &lt;- function(x1, x2) sqrt(sum((x1 - x2) ^ 2)) training_set &lt;- training_set %&gt;% rowwise() %&gt;% mutate(distance = euc_dist(c(x1,x2,x3), c(0,0,0))) %&gt;% ungroup() kable(training_set) x1 x2 x3 y distance 0 3 0 red 3.000000 2 0 0 red 2.000000 0 1 3 red 3.162278 0 1 2 green 2.236068 -1 0 1 green 1.414214 1 1 1 red 1.732051 What is our prediction with K = 1? Why? Let’s find the y value of the single closest (k = 1) training observation. training_set %&gt;% filter(distance == min(distance)) %&gt;% select(y) %&gt;% pull() ## [1] &quot;green&quot; Since the closest observation in the training data is green, K = 1 classifies our test observation as green. What is our prediction with K = 3? Why? First we find the three closest values. Then we measure the breakdown of y responses in this group of three observations. We find that two observations have value of red, and one has green. Given red has the highest probability of the two y values, we assign the training observation as red. training_set %&gt;% top_n(3, -distance) %&gt;% mutate(n = n()) %&gt;% group_by(y) %&gt;% summarise(prop = n()/max(n)) %&gt;% filter(prop == max(prop)) %&gt;% pull(y) ## [1] &quot;red&quot; If Bayes decision boundary is highly non-linear, then do we expect the best value of \\(K\\) to be large or small? Why? We expect the value of \\(K\\) to decline as the decision boundary grows more non-linear. A smaller value of \\(K\\) is more suspectible to small changes between observations, which is the type of pattern highly non-linear decision boundary would depict. The R exercises are pretty basic after this. I am going to skip them for now. "],
["linear-regression.html", "Chapter 3 Linear Regression 3.1 Packages used in this chapter 3.2 Simple Linear Regression 3.3 Multiple Linear Regression", " Chapter 3 Linear Regression Linear regression is a simple yet very powerful approach in statistical learning. It is important to have a strong understanding of it before moving on to more complex learning methods. 3.1 Packages used in this chapter library(tidyverse) library(modelr) 3.2 Simple Linear Regression Simple linear regression is predicting a quantitative response \\(Y\\) based off a single predcitor \\(X\\). It can be written as below: \\(Y \\approx \\beta_0 + \\beta_1X\\) simple linear regression \\(\\beta_0\\) and \\(\\beta_1\\) represent the intercept and slope terms and are together known as the coefficients. \\(\\beta_0\\) and \\(\\beta_1\\) represent the unknown intercept and slope terms and are together known as the coefficients. We will use our training data to estimate these parameters and thus estimate the response \\(Y\\) based on the value of \\(X = x\\): \\(\\hat y = \\hat\\beta_0 + \\hat\\beta_1x\\) 3.2.1 Estimating the Coefficients We need to use data to estimate these coefficients. \\((x_1,y_1), (x_2,y_2),..., (x_n,y_n)\\) These represent the training observations, in this case pairs of \\(X\\) and \\(Y\\) measurements. The goal is to use these measurements to estimate \\(\\beta_0\\) and \\(\\beta_1\\) such that the linear model fits our data as close as possible. Measuring closeness can be tackled a number of ways, but least squares is the most popular. If we let \\(\\hat y_i = \\hat\\beta_0 + \\hat\\beta_1x_i\\) be the prediction of \\(Y\\) at observation \\(X_i\\), then \\(e_i = y_i - \\hat y_i\\) represents the \\(i\\)th residual, the difference between the observed value \\(y_i\\) and the predicted value \\(\\hat y_i\\). Now we can define the residual sum of squares (RSS) as \\(RSS = e_1^2 + e_2^2 + ... + e_n^2\\) residual sum of squares or more explicitly as \\(RSS = (y_1 - \\hat\\beta_0 - \\hat\\beta_1x_2)^2 + (y_2 - \\hat\\beta_0 - \\hat\\beta_1x_2)^2 + ... + (y_n - \\hat\\beta_0 - \\hat\\beta_1x_n)^2\\) Minimizing the RSS (proof can be found here) using \\(\\beta_0\\) and \\(\\beta_1\\) produces: \\(\\frac{\\displaystyle \\sum_{i=1}^{n}(x_i-\\bar x)(y_i - \\bar x)}{\\displaystyle\\sum_{i=1}^{n}(x_i - \\bar x)^2}\\) least squares coefficient estimates (simple linear regression) 3.2.2 Assessing the Accuracy of the Coefficient Estimate Remember that the true function for \\(f\\) contains a random error term \\(\\epsilon\\). This means the linear relationship can be written as \\(Y = \\beta_0 + \\beta_1X + \\epsilon\\) population regression line \\(\\beta_0\\) is the intercept term (value of \\(Y\\) when \\(X = 0\\)). \\(\\beta_1\\) is the slope (how much does \\(Y\\) change with one-unit change of \\(X\\)). \\(\\epsilon\\) is the error term that captures everything our model doesn’t (unknown variables, measurement error, unknown true relationship). The population regression line captures the best linear approximation to the true relationship between \\(X\\) and \\(Y\\). In real data, we often don’t know the true relationship and have to rely on a set of observations. Using the observations to estimate the coefficients via least squares produces the least squares line. Let’s simulate and visualize this relationship: simulate n = 200 observations compare the population regression line (sim_y) to a number of possible least squares lines (generated from 10 different training sets of the data) # f(x), or Y = 2 + 2x + error sim_linear &lt;- tibble( b0 = 2, b1 = 2, x = 1:100 + rnorm(n = 200, mean = 100, sd = 15), err = rnorm(200, sd = 50), sim_y = b0 + b1 * x, true_y = b0 + b1 * x + err ) # generate 10 training sets y &lt;- tibble() for (i in 1:10) { x &lt;- sample_frac(sim_linear, 0.1) %&gt;% mutate(iter_set = i) y &lt;- y %&gt;% bind_rows(x) } # apply linear model to each sample by_iter &lt;- y %&gt;% group_by(iter_set) %&gt;% nest() lm_model &lt;- function(df) { lm(true_y ~ x, data = df) } by_iter &lt;- by_iter %&gt;% mutate( model = map(data, lm_model), preds = map2(data, model, add_predictions) ) # extract predictions preds &lt;- unnest(by_iter, preds) ggplot(data = sim_linear, aes(x = x, y = true_y)) + geom_point(alpha = 1 / 3) + geom_line(data = preds, aes(x = x, y = pred, colour = iter_set, group = iter_set), linetype = &quot;F1&quot;, size = .75) + geom_line(aes(y = sim_y), colour = &quot;red&quot;, size = 1.5) + theme_minimal() + theme( legend.position = &quot;none&quot;, panel.grid.minor = element_blank(), panel.grid.major = element_blank(), axis.line = element_line(colour = &quot;grey92&quot;) ) + labs( title = &quot;Each least squares line provides a reasonable estimate&quot;, y = &quot;y&quot; ) The chart above demonstrates the population regression line (red) surrounded by ten different estimates of the least squares line. Notice how every least squares line (shades of blue) is different. This is because each one is generated from a random sample pulled from the simulated data. For a real-world comparison, the simulated data would be the entire population data which is often impossible to obtain. The observations used to generate the least squares line would be the sample data we have access to. In the same way a sample mean can provide a reasonable estimate of the population mean, fitting a least squares line can provide a reasonable estimate of the population regression line. This comparison of linear regression to estimating population means touches on the topic of bias. An estimate of \\(\\mu\\) using the the sample mean \\(\\hat\\mu\\) is unbiased. On average, the sample mean will not systemically over or underestimate \\(\\mu\\). If we were to take a large enough estimates of \\(\\mu\\), each produced by a particular set of observations, then this average would exactly equal \\(\\mu\\). This concept applies to our estimates of \\(\\beta_0, \\beta_1\\) as well. A question that can be asked is how close on average the sample mean \\(\\hat\\mu\\) is to \\(\\mu\\). We can compute the standard error of \\(\\hat\\mu\\) to answer this. \\(Var(\\hat\\mu) = SE(\\hat\\mu)^2 = \\sigma^2/n\\) standard error This formula measures the average amount that \\(\\hat\\mu\\) differs from \\(\\mu\\). As the number of observations \\(n\\) increases, the standard error decreases. We can also use this to calculate how close \\(\\hat\\beta_0, \\hat\\beta_1\\) are to \\(\\beta_0, \\beta_1\\). \\(SE(\\hat\\beta_0)^2= \\sigma^2 \\left[1/n + \\frac{\\displaystyle \\bar x^2}{\\displaystyle\\sum_{i=1}^{n}(x_i - \\bar x)^2} \\right]\\) \\(SE(\\hat\\beta_1)^2=\\frac{\\displaystyle \\sigma^2}{\\displaystyle\\sum_{i=1}^{n}(x_i - \\bar x)^2}\\) where \\(\\sigma^2 = Var(\\epsilon)\\). For this to work, the assumption has to be made that the error terms \\(\\epsilon_i\\) are uncorrelated and all share a common variance. This is often not the case, but it doesn’t mean the formula can’t be used for a decent approximation. \\(\\sigma^2\\) is not known, but can be estimated from training observations. This estimate is the residual standard error and is given by formula \\(RSE = \\sqrt{RSS/(n-2}\\). What can we use these standard error formulas for? A useful technique is to calculate confidence intervals from the standard error. If we wanted to compute a 95% confidence interval for \\(\\beta_0,\\beta_1\\), it would take the form below. \\(\\hat\\beta_1 \\pm 2 * SE(\\hat\\beta_1)\\) \\(\\hat\\beta_0 \\pm 2 * SE(\\hat\\beta_0)\\) Standard errors can also be used to perform hypotheses tests. \\(H_0\\): There is no relationship between \\(X\\) and \\(Y\\), or \\(\\beta_1 = 0\\) null hypothesis \\(H_0\\): There exists a relationship between \\(X\\) and \\(Y\\), or \\(\\beta_1 \\neq 0\\) alternative hypothesis To test the null hypothesis, we need to test whether \\(\\hat\\beta_1\\) is far enough away from zero to conclude that is it non-zero. How far enough from zero is determined by the value of \\(\\hat\\beta_1\\) as well as \\(SE(\\hat\\beta_1)\\). We compute a t-statistic \\(t = (\\beta_1 - 0)/SE(\\hat\\beta_1)\\) t-statistic This measures how many standard deviations \\(\\hat\\beta_1\\) is from 0. If there is no relationship between \\(X\\) and \\(Y\\), then \\(t\\) will follow a t-distribution. The t-distribution is similar to the normal distribution, but has slightly heavier tails. Like the normal distribution, we can use this to compute the probability of observing any number equal to or larger than \\(|t|\\). This probability is the p-value. We can interpret a p-value as the probability we would observe the sample data that produced the \\(t\\)-statistic, given that there is no actual relationship between the predictor \\(X\\) and the response \\(Y\\). This means that a small p-value supports the inference that there exists a relationship between the predictor and the response. In this case, based on whichever threshold \\(\\alpha\\) (common value is 0.05) we set, a small enough p-value would lead us to reject the null hypothesis. 3.2.3 Assessing the Accuracy of the Model Now that we determined the existence of a relationship, how can we measure how well the model fits the data? Measuring the quality of a linear regression fit is often handled by two quantities: the residual standard error and the R^2 statistic. 3.2.3.1 Residual Standard Error Since every observation has an associated error term \\(\\epsilon\\), having the knowledge of true \\(\\beta_0\\) and \\(\\beta_1\\) will still not allow one to perfectly predict \\(Y\\). The residual standard error estimates the standard deviation of the error term. \\(RSE = \\sqrt{1/(n-2)*RSS} = \\sqrt{1/(n-2)\\sum_{i=1}^{n}(y_i - \\hat y)^2}\\) residual standard error We can interpret the residual standard error as how much, on average, our predictions deviate from the true value. Whether the value is acceptable in terms of being a successful model depends on the context of the problem. Predicting hardware failure on an airplane would obviously carry much more stringent requirements than predicting the added sales from a change in a company’s advertising budget. 3.2.3.2 R^2 statistic The RSE provides an absolute number. Given that it depends on the scale of \\(Y\\), comparing RSE values across different domains and datasets isn’t useful. The R^2 statistic solves this problem by measuring in terms of proportion – it measures the variance explained and so always takes a value between 0 and 1. \\(R^2 = (TSS - RSS)/TSS = 1 - RSS/TSS\\) R^2 statistic where \\(TSS = \\sum_{i=1}^{n}(y_i-\\bar y)^2\\) is the total sum of squares. TSS can be thought of the amount of total variability in the response variable before any model is fitted to it. RSS is measured after fitting a model, and measures the amount of unexplained variance remaining in the data. Therefore, R^2 can be thought of as the proportion of variance in the data that is explained by fitting a model with \\(X\\). While R^2 is more intrepetable, determing what constitutes a R^2 is subjective to the problem. Relationships that are known to be linear with little variance would expect an R^2 very close to 1. In reality, a lot of real-world data is not truly linear and could be heavily influenced by unknown, immeasurable predictors. In such cases a linear approximation would be a rough fit, and a smaller R^2 would not be unordinary. There is a relation between R^2 and the correlation. \\(r = Cor(X,Y) = \\sum_{i=1}^{n}((x_i-\\bar x)(y_i - \\bar y))/(\\sqrt{\\sum_{i=1}^{n}(x_i - \\bar x)^2}\\sqrt{\\sum_{i=1}^{n}(y_i - \\bar y)^2})\\) correlation Both measure the linear relationship between \\(X\\) and \\(Y\\), and within the simple linear regression domain, \\(r^2 = R^2\\). Once we move into multiple linear regression, in which we are using multiple predictors to predict a response, correlation loses effectiveness at measuring a model in whole as it can only measure the relationship between a single pair of variables. 3.3 Multiple Linear Regression Simple linear regression works well when the data involves a single predictor variable. In reality, there are often multiple predictor variables. We will need to extend the simple linear regression model and provide each predictor variable \\(p\\) with a slope coefficient. \\(Y = \\beta_0 + \\beta_1X_1 + \\beta_2X_2 + ... + \\beta_pX_p + \\epsilon\\) multiple linear regression 3.3.1 Estimating the Regression Coefficients Again, we need to estimate the regression coefficients. \\(\\hat y = \\hat\\beta_0 + \\hat\\beta_1X_1 + \\hat\\beta_2X_2 + ... + \\hat\\beta_pX_p\\) We will utilize the same approach of minimizing the sum of squared residuals (RSS). \\(RSS = \\sum_{i=1}^{n}(y_i - \\hat y_i)^2 = \\sum_{i=1}^{n}(y_i - \\hat\\beta_0 - \\hat\\beta_1x_{i1} - \\hat\\beta_2x_{i2} - ... - \\hat\\beta_px_{ip})^2\\) Minimizing these coefficients is more complicated than the simple linear regression setting, and is best represented using linear algebra. See this Wikipedia section for more information on the formula. Interpreting a particular coefficient, (say \\(\\beta_1\\)) in a multiple regression model can be thought of as follows: if constant value for all other \\(\\beta_p\\) are maintained, what effect would an increase in \\(beta_1\\) have on \\(Y\\)? A side effect of this is that certain predictors which were deemed significant when contained in a simple linear regression can become insignificant when multiple predictors are involved. For an advertising example, newspaper could be a significant predictor of revenue in the simple linear regression context. However, when combined with tv and radio in a multiple linear regression setting, the effects of increasing newspaper spend while maintaining tv and radio becomes insignificant. This could be due to a correlation of newspaper spend in markets where radio spend is high. Multiple linear regression exposes predictors that act as “surrogates” for others due to correlation. 3.3.2 Some Important Questions 3.3.2.1 Is There a Relationship Between the Response and Predictors? To check this, we need to check whethere all \\(p\\) coefficients are zero, i.e. \\(\\beta_1 = \\beta_2 = ... = \\beta_p = 0\\). We test the null hypothesis, \\(H_o:\\beta_1 = \\beta_2 = ... = \\beta_p = 0\\) against the alternative \\(H_a:\\) at least one \\(\\beta_j\\) is non-zero The hypothesis test is performed by computing the \\(F-statistic\\), \\(F = \\frac{(TSS-RSS)/p}{RSS/(n-p-1)}\\) correlation If linear model assumptions are correct, one can show that \\(E\\{RSS/(n-p-1)\\} = \\sigma^2\\) and that, provided \\(H_o\\) is true, \\(E\\{(TSS-RSS)/p\\} = \\sigma^2\\) In simple terms, if \\(H_o\\) were true and all of the predictors have regression coefficients of 0, we would expect the unexplained variance of the model to be approximately equal to that of the total variance, and both the numerator and the denominator of the F-statistic formula to be equal. When there is no relationship between the response and predictors, the F-statistic will take on a value close to 1. However, as RSS shrinks (the model begins to account for more of the variance), the numerator grows and the denominator shrinks, both causing the F-statistic to increase. We can think of the F-statistic as a ratio between the explained variance and unexplained variance. As the explained variance grows larger than the unexplained portion, the likelihood that we reject the null hypothesis grows. How large does the F-statistic need to be to reject the null hypothesis? This depends on \\(n\\) and \\(p\\). As \\(n\\) grows, F-statistics closer to 1 may provide sufficient evidence to reject \\(H_o\\). If \\(H_o\\) is true and \\(\\epsilon_i\\) have a normal distribution, the F-statistic follows an F-distribution. We can compute the p-value for any value of \\(n\\) and \\(p\\) associated with an F-statistic. # TODO remove this section? Sometimes we want to test whether a particular subset of \\(q\\) of the coefficients are zero. The null hypothesis could be \\(H_o : \\beta_{p-q+1} = \\beta_{p-q+2} = \\beta_p = 0\\) In this case we fit a second model that uses all the variables except the last \\(q\\). We will call the residual sum of squares for the second model \\(RSS_0\\). Then, the F-statistic is, \\(F = \\frac{(RSS_0 - RSS)/q}{RSS(n-p-1)}\\) We are testing a model without the \\(q\\) predictors and seeing how it compares to the original model containing all the predictors. Why do we need to look at overall F-statistics if we have individual p-values of the predictors? There are scenarios where individual predictors, by chance, will have small p-values, even in the absence of any true association. This could lead us to incorrectly diagnose a relationship. The overall F-statistic does not suffer this problem because it adjusts for the number of predictors. The F-statistic approach works when the number of predictors \\(p\\) is small compared to \\(n\\). Sometimes, we have situations where \\(p &gt; n\\). In this situation, ther eare more coefficients \\(\\beta_j\\) to estimate than observations from which to estimate them. Such situations requires different approaches that we haven’t discussed yet (see chapter 6) # TODO add chapter 6 link 3.3.2.2 Deciding on Important Variables The first thing we do in a multiple regression is to compute the F-statistic and determine that at least one of the predictors is related to the response. The task of determining which predictors are associated with the response is referred to as variable selection. We could try out a lot of different models with combinations of predictors, \\(2^p\\), but this is not practical as \\(p\\) grows. There are three ways to approach this task: Forward selection: we begin with the null model, which contains an intercept but no predictors. We then fit \\(p\\) simple linear regressions and add to the null model the variable that results in the lowest RSS. We then repeat the process to determine the lowest RSS of the now two-variable model, continuing until some stopping rule is satisfied. Backward selection: Start with all the variables in the model, remove the variable with the largest p-value. Then, for the new \\((p - 1)\\)-variable model, do the same. Continue until stopping rule is reached (for example, some p-value threshold) Mixed selection: Start with no variables, and proceed with forward selection. If any p-value of added variables pass a threshold once new predictors are added, we remove them. We continue the forward and backward until all variables in model have a sufficiently low p-value. 3.3.2.3 Model Fit Two common methods of model fit are the \\(RSE\\) and \\(R^2\\), the fraction of variance explained. More on \\(R^2\\): Values closer to 1 indicate a better fit Adding more variables can only increase it Adding variables that barely increase it can lead to overfitting Plotting the model can also be useful. 3.3.2.4 Predictions Three sorts of uncertainty within a given model: The coefficient estimates \\(\\hat\\beta_0 + \\hat\\beta_1...,\\hat\\beta_p\\) are estimates for \\(\\beta_0 + \\beta_1...,\\beta_p\\). This inaccuracy is part of the reducible error. We can compute a confidence interval to determine how close \\(\\hat Y\\) is to \\(f(X)\\). Model bias can result from the fact that we are fitting a linear approximation to the true surface of \\(f(X)\\). Even if we knew \\(f(X)\\), we still have random error \\(\\epsilon\\), which is the irreducible error. We can use prediction intervals to estimate how far \\(Y\\) will differ from \\(\\hat Y\\). These will always be larger than confidence intervals, because they incorporate both the reducible + irreducible error. 3.3.3 Other Considerations in the Regression Model So far, all predictors have been quantitative. However, it is common to have qualitative variables as well. Take a look at the ISLR::Credit dataset, which has a mix of both types. tidy_credit &lt;- ISLR::Credit %&gt;% as_tibble() %&gt;% janitor::clean_names() tidy_credit ## # A tibble: 400 x 12 ## id income limit rating cards age education gender student married ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 1 14.9 3606 283 2 34 11 &quot; Mal… No Yes ## 2 2 106. 6645 483 3 82 15 Female Yes Yes ## 3 3 105. 7075 514 4 71 11 &quot; Mal… No No ## 4 4 149. 9504 681 3 36 11 Female No No ## 5 5 55.9 4897 357 2 68 16 &quot; Mal… No Yes ## 6 6 80.2 8047 569 4 77 10 &quot; Mal… No No ## # … with 394 more rows, and 2 more variables: ethnicity &lt;fct&gt;, ## # balance &lt;int&gt; 3.3.3.1 Predictors with only Two Levels Suppose we wish to investigate difference in credit card balance between males and females, ignoring all other variables. If a qualitative variable (also known as a factor) only has two possible values, then incorporating it into a model is easy. We can create a binomial dummy variable that takes on two values. For gender, this could be a variable that is 0 if observation has value male, and 1 if observation has value female. This variable can then be used in the regression equation. Take note that lm() automatically creates dummy variables when given qualitative predictors. # TODO insert regression equation credit_model &lt;- lm(balance ~ gender, data = tidy_credit) tidy_credit_model &lt;- broom::tidy(credit_model) tidy_credit_model ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 510. 33.1 15.4 2.91e-42 ## 2 genderFemale 19.7 46.1 0.429 6.69e- 1 How to interpret this: males are estimated to carry a balance of $510. Meanwhile, females are expected to carry an additional \\(19.70\\) in debt. Notice the p-value is very high, indicating there is no significant difference between genders. 3.3.4 Qualitative Predictors with More than Two Levels A single dummy variable can not represent all the possible values. We can create additional dummy variables for this. Let’s make a dummy variable from ethnicity column, which takes three distinct values. This will yield two dummy variables. tidy_credit %&gt;% distinct(ethnicity) ## # A tibble: 3 x 1 ## ethnicity ## &lt;fct&gt; ## 1 Caucasian ## 2 Asian ## 3 African American fastDummies package will be used to generate these. In this case, African American serves as the baseline, and dummy variables are created for Caucasian and Asian. There will always be one fewer dummy variable than the number of levels. tidy_credit_dummy &lt;- tidy_credit %&gt;% fastDummies::dummy_cols(select_columns = &quot;ethnicity&quot;, remove_first_dummy = TRUE) %&gt;% janitor::clean_names() tidy_credit_dummy %&gt;% select(starts_with(&quot;ethnicity&quot;)) ## # A tibble: 400 x 3 ## ethnicity ethnicity_asian ethnicity_caucasian ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; ## 1 Caucasian 0 1 ## 2 Asian 1 0 ## 3 Asian 1 0 ## 4 Asian 1 0 ## 5 Caucasian 0 1 ## 6 Caucasian 0 1 ## # … with 394 more rows We can again run the model with newly created dummy variables. Keep in mind, prior creation is not necessary, as lm will generate them automatically. ethnicity_model &lt;- lm(balance ~ ethnicity_asian + ethnicity_caucasian, data = tidy_credit_dummy) broom::tidy(ethnicity_model) ## # A tibble: 3 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 531. 46.3 11.5 1.77e-26 ## 2 ethnicity_asian -18.7 65.0 -0.287 7.74e- 1 ## 3 ethnicity_caucasian -12.5 56.7 -0.221 8.26e- 1 3.3.5 Extensions of the Linear Model The linear regression model makes highly restrictive assumptions. Two of the most important are that the relationship between predictors and response are additive and linear. Additive means that the effect of changes in a predictor \\(X_j\\) on the response \\(Y\\) is independet of the values of the other predictors. Linear means that the the change in response \\(Y\\) to a one-unit change in \\(X_j\\) is constant, regardless of the value of \\(X_j\\). Here are some common approaches of extending the linear model. 3.3.5.1 Removing the Additive Assumption The additive property assumes that predictors slope terms are independent of the values of other predictors. However, this is not always the case. Imagine an advertising scenario where the effectiveness of TV spend is affected by the radio spend. This is known as an interaction effect. Imagine we have a model with two predictors, but they are not strictly additive. We could extend this model by adding an interaction term to it. \\(Y = \\beta_0 + \\beta_1X_1 + \\beta_2X_2 + \\beta_3X_1X_2 + \\epsilon\\) Now, the effect of \\(X_1\\) on \\(Y\\) is no longer constant; adjusting \\(X_2\\) will change the impact of \\(X_1\\) on \\(Y\\). An easy scenario is the productivity of a factory. Adding lines and workers both would increase productivity. However, the effect is not purely additive. Adding lines without having workers to operate them would not increase productivity. There is an interaction between workers and lines that needs to be accounted for. The hierarchical principle states that if we include an interaction in a model, we should also include the main effects, even if the p-values associated with their coefficients are not significant. It’s also possible for qualitative and quantitative variables to interact with each other. We will again use the Credit data set. Suppose we wish to predict balance using the income (quantitative) and student (qualitative) variables. First, let’s take a look at what it looks like to fit this model without an interaction term. Both income and student are significant. lm_credit &lt;- lm(balance ~ income + student, data = tidy_credit) lm_credit %&gt;% broom::tidy() ## # A tibble: 3 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 211. 32.5 6.51 2.34e-10 ## 2 income 5.98 0.557 10.8 7.82e-24 ## 3 studentYes 383. 65.3 5.86 9.78e- 9 tidy_credit %&gt;% modelr::add_predictions(lm_credit) %&gt;% ggplot(aes(x = income, y = pred, colour = student)) + geom_line(size = 1.5) + geom_point(aes(y = balance, colour = student), fill = &quot;grey&quot;, pch = 21, alpha = 1 / 2) + theme_minimal() It’s a pretty good fit, and because there is no interaction terms, the lines are parallel. Notice how many more observations there are to fit on for the non-students. Now, let’s add an interaction term. lm_credit_int &lt;- lm(balance ~ income + student + income * student, data = tidy_credit) lm_credit_int %&gt;% broom::tidy() ## # A tibble: 4 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 201. 33.7 5.95 5.79e- 9 ## 2 income 6.22 0.592 10.5 6.34e-23 ## 3 studentYes 477. 104. 4.57 6.59e- 6 ## 4 income:studentYes -2.00 1.73 -1.15 2.49e- 1 tidy_credit %&gt;% modelr::add_predictions(lm_credit_int) %&gt;% ggplot(aes(x = income, y = pred, colour = student)) + geom_line(size = 1.5) + geom_point(aes(y = balance, colour = student), fill = &quot;grey&quot;, pch = 21, alpha = 1 / 2) + theme_minimal() The model now takes into account how income and student interact with each other. Interpreting the chart suggests that increases in income among students has a smaller effect on balance than it does to non-students. Does it fit better? models &lt;- list(without_interaction = lm_credit, with_interaction = lm_credit_int) purrr::map_df(models, broom::glance, .id = &quot;model&quot;) %&gt;% select(model, r.squared, statistic, p.value, df) ## # A tibble: 2 x 5 ## model r.squared statistic p.value df ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 without_interaction 0.277 76.2 9.64e-29 3 ## 2 with_interaction 0.280 51.3 4.94e-28 4 Not by much. The model with the interaction term has a slightly higher \\(R^2\\), but the added complexity of the model, combined with the small number of observations of students in the dataset, suggests overfitting. 3.3.5.2 Non-linear Relationships The linear model assumes a linear relationship between the response and predictors. We can extend the linear model to accomodate non-linear relationships using polynomial regression. A way to incorporate non-linear associations into a linear model is to include transformed versions of the predictor in the model. For example, within the Auto dataset, predicting mpg with a second-order polynomial of horsepower would look like this: \\(mpg = \\beta_0 + \\beta_1horsepower + \\beta_2horsepower^2 + \\epsilon\\) Let’s look at the Auto dataset with models of different polynomial degrees overlaid. Clearly, the data is not linear, exhibiting a quadratic shape. tidy_auto &lt;- ISLR::Auto %&gt;% as_tibble() lm_auto &lt;- lm(mpg ~ horsepower, data = tidy_auto) lm_auto2 &lt;- lm(mpg ~ poly(horsepower, 2), data = tidy_auto) lm_auto5 &lt;- lm(mpg ~ poly(horsepower, 5), data = tidy_auto) tidy_auto %&gt;% gather_predictions(lm_auto, lm_auto2, lm_auto5) %&gt;% ggplot(aes(x = horsepower, y = mpg)) + geom_point(alpha = 1 / 3, pch = 21) + geom_line(aes(y = pred, colour = model), size = 1.5) The second-order polynomial does a good job of fitting the data, while the fifth-order seems to be unnecessary. The model performance reflects that: models &lt;- list( linear = lm_auto, second_order = lm_auto2, fifth_order = lm_auto5 ) purrr::map_df(models, broom::glance, .id = &quot;model&quot;) %&gt;% select(model, r.squared, statistic, p.value, df) ## # A tibble: 3 x 5 ## model r.squared statistic p.value df ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 linear 0.606 600. 7.03e-81 2 ## 2 second_order 0.688 428. 5.40e-99 3 ## 3 fifth_order 0.697 177. 1.16e-97 6 The second-order model has significantly higher R^2, and only one more degree of freedom. This approach of extending linear models to accomodate non-linear relationships is known as polynomial regression. 3.3.6 Potential Problems Many problems can occur when fitting a linear model to a data set. Non-linearity of the response-predictor relationship. Correlation of error terms. Non-constant variance of error terms Outliers High-leverage points Collinearity 3.3.6.1 1. Non-linearity of the data The linear model assumes a straight-line relationship between the predictors and the response. If this is not the case, the inference and prediction accuracy of the fit are suspect. We can use a residual plot to visualize when a linear model is placed on to a non-linear relationship. For a simple linear regression model, we plot the residuals \\(e_i = y_i - \\hat{y}_i\\) compared to the predictor. For multiple regression, we plot the residuals versus the predicted values \\(\\hat{y}_i\\). If the relationship is linear, the residuals should exhibit a random pattern. Let’s take the Auto dataset and plot the residuals compared to horsepower for each model we fit. Notice in the model containing no quadratic term is U-shaped, indicating a non-linear relationship. The model that contains horsepower^2 exhibits little pattern in the residuals, indicating a better fit. tidy_auto %&gt;% gather_predictions(lm_auto, lm_auto2, lm_auto5) %&gt;% ggplot(aes(x = horsepower, y = mpg-pred, colour=model)) + geom_point(alpha = 1 / 3) + geom_hline(yintercept = 0, size = 1.5, colour=&quot;grey&quot;) + facet_wrap(~model, nrow=3) If the residual plot indicates that there non-linear associations in the data, a simple approach is to use non-linear transofmrations of the predictors. 3.3.6.2 2. Correlation of Error Terms The linear regression model assumes that the error terms \\(\\epsilon_1,\\epsilon_2,...,\\epsilon_n\\) are uncorrelated. This means that for a given error term \\(e_i\\), no information is provided about the value \\(e_{i+1}\\). The standard errors that are computed for the estimated regression coefficients are based on this assumption. If there is a correlation among the error terms, than the estimated standard errors will tend to underestimate the true standard errors, producing confidence and prediction intervals narrower than they should be. Given the incorrect assumption, a 95% confidence interval may have a much lower probability than 0.95 of containing the true value of the parameter. P-values would also be lower than they should be, giving us an unwarranted sense of confidence in our model. These correlations occur frequently in time series data, which consists of observations obtained at discrete points in time. In many cases, observations that are obtained at adjacent time periods points will have positively correlated errors. We can again plot the residuals as a function of time to see if this is the case. If no correlation, there should be no pattern in the residuals. If error terms exhibit correlation, we may see that adjacent residuals exhibit similar values, known as tracking. This can also happen outside of time series data. The assumption of uncorrelated errors is extremely important for linear regression as well as other statistical methods. # TODO add a residual plot for time series with correlated error terms, similar to pg. 95 tidy_sunspot &lt;- data.frame(y=as.matrix(sunspot.year), ds=time(sunspot.year)) %&gt;% as_tibble() tidy_sunspot sunspot_lm &lt;- lm(data = tidy_sunspot, y ~ ds) tidy_sunspot %&gt;% add_predictions(sunspot_lm) %&gt;% ggplot(aes(x=ds, y=pred-y)) + geom_point() + geom_line() + geom_smooth(method=&quot;lm&quot;, se = FALSE) 3.3.6.3 3. Non-constant Variance of Error Terms Another assumption of linear regression is that the error terms have a constant variance, \\(Var(\\epsilon_i) = \\sigma^2\\). Standard errors, confidence intervals, and hypothesis tests rely upon this assumption. It is common for error terms to exhiti non-constant variance. Non-constant variance in the errors, also known as heteroscedasticity, can be identified from a funnel shape in the residual plot. Let’s take a look at the MASS::cats dataset, which contains observations of various cats sex, body weight, and heart weight. We fit a linear model to it, and then plot the residuals. I’ve added a linear fit to the residual plot itself. Observe how the error terms begin to funnel out as bwt increases, indicating non-constant variance of the error terms. tidy_cats &lt;- MASS::cats %&gt;% as_tibble() %&gt;% janitor::clean_names() lm_cats &lt;- lm(data = tidy_cats, hwt ~ bwt) tidy_cats %&gt;% add_predictions(lm_cats) %&gt;% ggplot(aes(x = bwt, y = hwt - pred)) + geom_point() + geom_smooth(method=&quot;lm&quot;, level = 0.99) # TODO add OLS method to this # get weights of each response # fit a linear model on the residuals tidy_cats_res &lt;- tidy_cats %&gt;% add_predictions(lm_cats) %&gt;% mutate(res = hwt - pred) %&gt;% select(bwt, hwt, res) lm_cats_res &lt;- lm(data = tidy_cats_res, res ~ hwt) cat_weights &lt;- tidy_cats_res %&gt;% add_predictions(lm_cats_res) %&gt;% mutate(res_var = (res-pred)^2) %&gt;% mutate(weight = 1 / res_var) %&gt;% pull(weight) lm_cats_weights &lt;- lm(data = tidy_cats, hwt ~ bwt, weights = cat_weights) tidy_cats %&gt;% gather_predictions(lm_cats, lm_cats_weights) %&gt;% ggplot(aes(x = bwt, y = hwt - pred, colour = model)) + geom_point(aes(y = hwt-pred, colour = model)) + geom_smooth(method=&quot;lm&quot;) When this occurs, there a few ways to remedy it. You could transform the response \\(Y\\) using a function such as \\(logY\\) or \\(\\sqrt{Y}\\). If we have a good idea of the variance of each response, we could fit our model using weighted least squares, which weights proportional to the inverse of the expected variance of an observation. 3.3.6.4 4. Outliers An outlier is a point for which \\(y_i\\) is far from the value predicted by the model. These can arise for a variety of reasons, such as incorrect recording of an observation during data collection. For the msleep dataset below, which contains data on mammal sleep durations, I’ve highlighted two observations that most would consider outliers. This is for the African elephant and Asian elephant mammals, who’s bodyweights are far and away from the rest of mammals. There are others that could be considered outliers as well. Identifying outliers is an often arbitrary process. msleep %&gt;% ggplot(aes(x = awake, y = bodywt, colour = name)) + geom_point() + gghighlight::gghighlight(bodywt&gt;2000) Let’s fit a linear model to predict body weight from how long the animal is awake. Notice how the data that maintains the elephant observations significantly affects the slope, drawing the regression line away from the majority of observations. lm_sleep &lt;- lm(data = msleep, bodywt ~ awake) lm_sleep_filtered &lt;- lm(data = msleep %&gt;% filter(!name %in% c(&#39;African elephant&#39;, &#39;Asian elephant&#39;)), bodywt ~ awake) msleep %&gt;% gather_predictions(lm_sleep, lm_sleep_filtered) %&gt;% ggplot(aes(x = awake, y = bodywt)) + geom_point(pch=21, alpha = 1/3) + geom_line(aes(y = pred, colour = model), size = 1.5) + scale_colour_viridis_d() + theme_minimal() The model excluding the elephant observations has a significantly higher \\(R^2\\), which indicates a better fit. models &lt;- list(with_outliers = lm_sleep, without_outliers = lm_sleep_filtered) purrr::map_df(models, broom::glance, .id = &quot;model&quot;) %&gt;% select(model, r.squared, statistic, p.value, df) ## # A tibble: 2 x 5 ## model r.squared statistic p.value df ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 with_outliers 0.0973 8.73 0.00409 2 ## 2 without_outliers 0.222 22.5 0.00000900 2 Another way of handling an outlier is transforming the response variable. Upon inspection of the scatterplot, it becomes clear that the relationship between bodywt and awake is not linear. If we take the same dataset and apply a log function to response variable bodywt, we see that the outliers no longer exists. msleep %&gt;% ggplot(aes(x = awake, y = log(bodywt))) + geom_smooth(method = &quot;lm&quot;) + geom_point() The model that uses log(bodywt) as the response also has better performance than both models above. lm_sleep_log &lt;- lm(data = msleep, log(bodywt) ~ awake) lm_sleep_log %&gt;% broom::glance() %&gt;% select(r.squared, statistic, p.value, df) ## # A tibble: 1 x 4 ## r.squared statistic p.value df ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0.324 38.7 0.0000000202 2 3.3.6.5 5. High Leverage Points Observations with high leverage have an unusual value for \\(x_i\\). In a simple regression model, these are practically the same as outliers (I could have flipped predictors with response in my mammal sleep model above). High leverage points are observations that significantly move the regression line. However, in multiple regression, it is possible to have an observation that is well within the range of each individual predictor’s values, but unusual terms of the full set of predictors. Let’s look at temp and ozone data from airquality dataset. Plenty of observations have ozone &gt; 100 and temp &lt; 80, but the combination is rare. If we fit models with and without this leverage point, we can see how the regression line moves. tidy_airquality &lt;- airquality %&gt;% as_tibble() %&gt;% janitor::clean_names() tidy_airquality %&gt;% ggplot(aes(x = ozone, y = temp)) + geom_point() + gghighlight::gghighlight(ozone &gt; 100 &amp; temp &lt; 80) lm_temp &lt;- lm(data = tidy_airquality, temp ~ ozone) lm_temp_filtered &lt;- lm(data = tidy_airquality %&gt;% filter(!(ozone &gt; 100 &amp; temp &lt; 80)), temp ~ ozone) Notice the slight change in the fit. This observation isn’t that extreme, but still produces a visible difference in fit. More extreme observations would move this line even further, potentially causing an improper fit. tidy_airquality %&gt;% gather_predictions(lm_temp, lm_temp_filtered) %&gt;% ggplot(aes(x = ozone, y = pred, colour = model)) + geom_line() + geom_point(aes(y = temp), alpha = 1/3, colour = &quot;grey&quot;) The model without the strange observation performs slightly better. In reality, I would probably include it as going from an \\(R^2\\) of 0.488 to 0.506 isn’t worth the manual effort. models &lt;- list(with_leverage = lm_temp, without_leverage = lm_temp_filtered) purrr::map_df(models, broom::glance, .id = &quot;model&quot;) %&gt;% select(model, r.squared, statistic, p.value, df) ## # A tibble: 2 x 5 ## model r.squared statistic p.value df ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 with_leverage 0.488 109. 2.93e-18 2 ## 2 without_leverage 0.506 116. 5.05e-19 2 We can also quantify an observation’s leverage by computing the \\(leverage statistic\\). A large value of this statistic indicates an observation with high leverage. For a simple linear regression, \\(h_i = \\frac{1}{n} + \\frac{x_i - \\bar{x}^2}{\\sum_{i&#39;=1}^{n}}\\) leverage statistic As \\(x_i\\) increases from \\(\\bar{x}\\), \\(h_i\\) increases. Combined with a high residual (outlier), a high-leverage observation could be dangerous. 3.3.6.6 6. Colinearity Collinearity is when two or more predictor variables are closely related to one another. If we look at our tidy_credit tibble, we see that rating and limit are very highly correlated with one another. tidy_credit %&gt;% ggplot(aes(x = rating, y = limit)) + geom_point() The effects of collinearity can make it difficult to separate out the individual effects of collinear variables on the response. Since limit and rating move together, it can be hard to determine how each one separately is associated with the response, balance. # TODO add contour plot # clean up what this link did: https://yetanotheriteration.netlify.com/2018/01/high-collinearity-effect-in-regressions/ Two multiple regression models show the effects of regressing balance on age + limit versus rating + limit. Notice the large p-value for limit, combined with the &gt;10x increase in standard error for its coefficient compared to the original model. It’s effects have been masked by the collinearity it shares with rating. lm_age_limit &lt;- lm(data = tidy_credit, balance ~ age + limit) lm_rating_limit &lt;- lm(data = tidy_credit, balance ~ rating + limit) models &lt;- list(`Balance ~ Age + Limit` = lm_age_limit, `Balance ~ Rating + Limit` = lm_rating_limit) purrr::map_df(models, broom::tidy, .id = &quot;model&quot;) ## # A tibble: 6 x 6 ## model term estimate std.error statistic p.value ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Balance ~ Age + Limit (Intercept) -1.73e+2 43.8 -3.96 9.01e- 5 ## 2 Balance ~ Age + Limit age -2.29e+0 0.672 -3.41 7.23e- 4 ## 3 Balance ~ Age + Limit limit 1.73e-1 0.00503 34.5 1.63e-121 ## 4 Balance ~ Rating + Li… (Intercept) -3.78e+2 45.3 -8.34 1.21e- 15 ## 5 Balance ~ Rating + Li… rating 2.20e+0 0.952 2.31 2.13e- 2 ## 6 Balance ~ Rating + Li… limit 2.45e-2 0.0638 0.384 7.01e- 1 The growth in the standard error caused by collinearity caises the t-statistic (\\(B_j\\) divided by it’s standard error) to decline. As a result, we may fail to reject \\(H_0: \\beta_j = 0\\). This means that the power of the hypothesis test – the probability of correctly detecting a non-zero coefficient – is reduced by collinearity. Thus, it is desirable to identify and address collinearity problems while fitting the model. A simple way is to look at the correlation matrix of the predoctors. library(corrr) tidy_credit %&gt;% select_if(is.numeric) %&gt;% select(-id) %&gt;% corrr::correlate() %&gt;% corrr:::stretch() %&gt;% ggplot(aes(x = x)) "]
]
